// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ERaceLibrary.Entities;
using Microsoft.EntityFrameworkCore;

namespace ERaceLibrary.DAL;

internal partial class ERaceContext : DbContext
{
    public ERaceContext(DbContextOptions<ERaceContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<CarClass> CarClasses { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Certification> Certifications { get; set; }

    public virtual DbSet<DatabaseVersion> DatabaseVersions { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Position> Positions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Race> Races { get; set; }

    public virtual DbSet<RaceDetail> RaceDetails { get; set; }

    public virtual DbSet<RaceFee> RaceFees { get; set; }

    public virtual DbSet<RacePenalty> RacePenalties { get; set; }

    public virtual DbSet<ReceiveOrder> ReceiveOrders { get; set; }

    public virtual DbSet<ReceiveOrderItem> ReceiveOrderItems { get; set; }

    public virtual DbSet<ReturnOrderItem> ReturnOrderItems { get; set; }

    public virtual DbSet<SalesCartItem> SalesCartItems { get; set; }

    public virtual DbSet<StoreRefund> StoreRefunds { get; set; }

    public virtual DbSet<UnOrderedItem> UnOrderedItems { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<VendorCatalog> VendorCatalogs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarID).HasName("PK_Cars_CarID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.CarClass).WithMany(p => p.Cars)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarsCarClasses_CarClassID");

            entity.HasOne(d => d.Member).WithMany(p => p.Cars).HasConstraintName("FK_CarsMembers_MemberID");
        });

        modelBuilder.Entity<CarClass>(entity =>
        {
            entity.HasKey(e => e.CarClassID).HasName("PK_CarClasses_CarTypeID");

            entity.Property(e => e.CertificationLevel).IsFixedLength();
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.CertificationLevelNavigation).WithMany(p => p.CarClasses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarClassesCertifications_CertificationLevel");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryID).HasName("PK_Categories_CategoryID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
        });

        modelBuilder.Entity<Certification>(entity =>
        {
            entity.HasKey(e => e.CertificationLevel).HasName("PK__Certific__F504F9930BFCACE6");

            entity.Property(e => e.CertificationLevel).IsFixedLength();
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
        });

        modelBuilder.Entity<DatabaseVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Database__3214EC07E92EEE32");

            entity.Property(e => e.DateTime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.EmployeeID).HasName("PK_Employees_EmployeeID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
            entity.Property(e => e.SocialInsuranceNumber).IsFixedLength();

            entity.HasOne(d => d.Position).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeesPositions_PositionID");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceID).HasName("PK_Invoices_InvoiceID");

            entity.Property(e => e.InvoiceDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
            entity.Property(e => e.Total).HasComputedColumnSql("([SubTotal]+[GST])", false);

            entity.HasOne(d => d.Employee).WithMany(p => p.Invoices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoicesEmployees_EmployeeID");
        });

        modelBuilder.Entity<InvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.InvoiceDetailID).HasName("PK_InvoiceDetails_InvoiceDetailID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoiceDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoiceDetailsInvoices_InvoiceID");

            entity.HasOne(d => d.Product).WithMany(p => p.InvoiceDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoiceDetailsProducts_ProductID");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.MemberID).HasName("PK_Members_MemberID");

            entity.Property(e => e.CertificationLevel).IsFixedLength();
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.CertificationLevelNavigation).WithMany(p => p.Members)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MembersCertifications_CertificationLevel");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderID).HasName("PK_Orders_OrderID");

            entity.Property(e => e.OrderDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Employee).WithMany(p => p.Orders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_OrdersEmployees_EmployeeID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Orders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_OrdersVendors_VendorID");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetailID).HasName("PK_OrderDetails_OrderDetailID");

            entity.Property(e => e.Quantity).HasDefaultValue(1);
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetailsOrders_OrderID");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetailsProducts_ProductID");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.HasKey(e => e.PositionID).HasName("PK_Positions_PositionID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductID).HasName("PK_Products_ProductID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductsCategories_CategoryID");
        });

        modelBuilder.Entity<Race>(entity =>
        {
            entity.HasKey(e => e.RaceID).HasName("PK_Races_RaceID");

            entity.Property(e => e.CertificationLevel).IsFixedLength();
            entity.Property(e => e.Laps).HasDefaultValue(1);
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
            entity.Property(e => e.Run)
                .HasDefaultValue("N")
                .IsFixedLength();

            entity.HasOne(d => d.CertificationLevelNavigation).WithMany(p => p.Races)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RacesCertifications_CertificationLevel");
        });

        modelBuilder.Entity<RaceDetail>(entity =>
        {
            entity.HasKey(e => e.RaceDetailID).HasName("PK_RaceDetails_RaceDetailsID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Car).WithMany(p => p.RaceDetails).HasConstraintName("FK_RaceDetailsCars_CarID");

            entity.HasOne(d => d.Invoice).WithMany(p => p.RaceDetails).HasConstraintName("FK_RaceDetailsInvoices_InvoiceID");

            entity.HasOne(d => d.Member).WithMany(p => p.RaceDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RaceDetailsMembers_MemberID");

            entity.HasOne(d => d.Penalty).WithMany(p => p.RaceDetails).HasConstraintName("FK_RaceDetailsRacePenalties_PenaltyID");

            entity.HasOne(d => d.Race).WithMany(p => p.RaceDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RaceDetailsRace_RaceID");
        });

        modelBuilder.Entity<RaceFee>(entity =>
        {
            entity.HasKey(e => e.RaceFeeID).HasName("PK_RaceFees_RaceFeeID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
        });

        modelBuilder.Entity<RacePenalty>(entity =>
        {
            entity.HasKey(e => e.PenaltyID).HasName("PK_RacePenalties_PenaltyID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
        });

        modelBuilder.Entity<ReceiveOrder>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderID).HasName("PK_ReceiveOrders_ReceiveOrderID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Employee).WithMany(p => p.ReceiveOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_ReceiveOrdersEmployees_EmployeeID");

            entity.HasOne(d => d.Order).WithMany(p => p.ReceiveOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_ReceiveOrdersOrders_OrderID");
        });

        modelBuilder.Entity<ReceiveOrderItem>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderItemID).HasName("PK_ReceiveOrderItems_ReceiveOrderItemID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.OrderDetail).WithMany(p => p.ReceiveOrderItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_ReceiveOrderItems_OrderDetails_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReceiveOrderItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_ReceiveOrderItems_ReceiveOrders_ReceiveOrderID");
        });

        modelBuilder.Entity<ReturnOrderItem>(entity =>
        {
            entity.HasKey(e => e.ReturnOrderItemID).HasName("PK_ReturnOrderItems_ReturnOrderItemID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.OrderDetail).WithMany(p => p.ReturnOrderItems).HasConstraintName("Fk_ReturnOrderItemsOrderDetails_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReturnOrderItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_ReturnOrderItemsReceiveOrders_ReceiveOrderID");
        });

        modelBuilder.Entity<SalesCartItem>(entity =>
        {
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Employee).WithMany(p => p.SalesCartItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesCartItems_Employees");

            entity.HasOne(d => d.Product).WithMany(p => p.SalesCartItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesCartItems_Products");
        });

        modelBuilder.Entity<StoreRefund>(entity =>
        {
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Invoice).WithMany(p => p.StoreRefundInvoices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StoreRefunds_Invoices");

            entity.HasOne(d => d.OriginalInvoice).WithMany(p => p.StoreRefundOriginalInvoices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StoreRefunds_Original_Invoices");

            entity.HasOne(d => d.Product).WithMany(p => p.StoreRefunds)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StoreRefunds_Products");
        });

        modelBuilder.Entity<UnOrderedItem>(entity =>
        {
            entity.HasKey(e => e.ItemID).HasName("PK_UnOrderedItems_ItemID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorID).HasName("PK_Vendors_VendorID");

            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);
        });

        modelBuilder.Entity<VendorCatalog>(entity =>
        {
            entity.HasKey(e => e.VendorCatalogID).HasName("PK_VendorCatalogs_VendorCatalogID");

            entity.Property(e => e.OrderUnitSize).HasDefaultValue(1);
            entity.Property(e => e.RemoveFromViewFlag).HasDefaultValue(false);

            entity.HasOne(d => d.Product).WithMany(p => p.VendorCatalogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VendorCatalogsProducts_ProductID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.VendorCatalogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VendorCatalogsVendors_VendorID");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}